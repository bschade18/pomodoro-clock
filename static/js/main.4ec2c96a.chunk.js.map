{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["accurateInterval","window","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timerLabel","breakLength","sessionLength","timer","start","intervalID","startPause","bind","assertThisInitialized","countdown","reset","startCountdown","clockUpdater","breakInc","breakDec","sessionInc","sessionDec","defBreakLength","defSessionLength","playBeep","pauseBeep","setState","cancel","minutes","Math","floor","seconds","_this2","prevState","document","getElementById","play","beep","pause","currentTime","react_default","a","createElement","id","clock","class","onClick","src","React","Component","fn","time","nextAt","timeout","wrapper","Date","getTime","setTimeout","clearTimeout","undefined","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ec2c96a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst accurateInterval = window.accurateInterval;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerLabel: \"Session\",\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      intervalID: \"\"\n    };\n    this.startPause = this.startPause.bind(this);\n    this.countdown = this.countdown.bind(this);\n    this.reset = this.reset.bind(this);\n    this.startCountdown = this.startCountdown.bind(this);\n    this.clockUpdater = this.clockUpdater.bind(this);\n    this.breakInc = this.breakInc.bind(this);\n    this.breakDec = this.breakDec.bind(this);\n    this.sessionInc = this.sessionInc.bind(this);\n    this.sessionDec = this.sessionDec.bind(this);\n    this.defBreakLength = this.defBreakLength.bind(this);\n    this.defSessionLength = this.defBreakLength.bind(this);\n\n    this.playBeep = this.playBeep.bind(this);\n    this.pauseBeep = this.pauseBeep.bind(this);\n  }\n\n  breakInc() {\n    if (this.state.breakLength <= 59 && this.state.start == false) {\n      this.setState({\n        breakLength: this.state.breakLength + 1\n      });\n    }\n  }\n  breakDec() {\n    if (this.state.breakLength >= 2 && this.state.start == false) {\n      this.setState({\n        breakLength: this.state.breakLength - 1\n      });\n    }\n  }\n  sessionInc() {\n    if (this.state.sessionLength <= 59 && this.state.start == false) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        timer: this.state.timer + 60\n      });\n    }\n  }\n  sessionDec() {\n    if (this.state.sessionLength >= 2 && this.state.start == false) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        timer: this.state.timer - 60\n      });\n    }\n  }\n  defBreakLength() {\n    this.setState({\n      breakLength: 5\n    });\n  }\n\n  defSessionLength() {\n    this.setState({\n      sessionLength: 25\n    });\n  }\n  startPause() {\n    if (this.state.start) {\n      this.setState({\n        start: false\n      });\n      this.state.intervalID && this.state.intervalID.cancel();\n    } else {\n      this.startCountdown();\n      this.setState({\n        start: true\n      });\n    }\n  }\n  clock() {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return minutes + \":\" + seconds;\n  }\n\n  startCountdown() {\n    this.setState({\n      intervalID: accurateInterval(() => {\n        this.countdown();\n        this.clockUpdater();\n      }, 1000)\n    });\n  }\n\n  clockUpdater() {\n    if (this.state.timer < 0) {\n      if (this.state.timerLabel == \"Session\") {\n        this.setState({\n          timer: this.state.breakLength * 60,\n          timerLabel: \"Break\"\n        });\n        this.playBeep();\n      } else {\n        this.setState({\n          timer: this.state.sessionLength * 60,\n          timerLabel: \"Session\"\n        });\n        this.playBeep();\n      }\n    }\n  }\n\n  countdown() {\n    this.setState(prevState => {\n      return {\n        timer: prevState.timer - 1\n      };\n    });\n  }\n\n  reset() {\n    this.pauseBeep();\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      timerLabel: \"Session\"\n    });\n    this.state.intervalID && this.state.intervalID.cancel();\n  }\n\n  playBeep() {\n    const beep = document.getElementById(\"beep\");\n    beep.play();\n  }\n\n  pauseBeep() {\n    const beep = document.getElementById(\"beep\");\n    beep.pause();\n    beep.currentTime = 0;\n  }\n\n  render() {\n    return (\n      <div>\n        <br />\n        <h1 id=\"title\">Pomodoro Clock</h1>\n        <p id=\"timer-label\">{this.state.timerLabel}</p>\n        <div id=\"time-left\">{this.clock()}</div>\n        <div class=\"row\">\n          <div class=\"col-6\">\n            <p id=\"break-label\">Break Length</p>\n            <p id=\"break-length\">{this.state.breakLength}</p>\n            <div class=\"break-button\">\n              <p id=\"break-decrement\" onClick={this.breakDec}>\n                <i class=\"fas fa-minus\" />\n              </p>\n\n              <p id=\"break-increment\" onClick={this.breakInc}>\n                <i class=\"fas fa-plus\" />\n              </p>\n            </div>\n          </div>\n\n          <div class=\"col-6\">\n            <p id=\"session-label\">Session Length</p>\n\n            <p id=\"session-length\">{this.state.sessionLength}</p>\n\n            <div class=\"session-button\">\n              <p id=\"session-decrement\" onClick={this.sessionDec}>\n                <i class=\"fas fa-minus\" />\n              </p>\n\n              <p id=\"session-increment\" onClick={this.sessionInc}>\n                <i class=\"fas fa-plus\" />\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div class=\"start-reset-btn\">\n              <p id=\"start-stop\" onClick={this.startPause}>\n                <i class=\"fa fa-play\" /> <i class=\"fa fa-pause\" />\n              </p>\n\n              <p id=\"reset\" onClick={this.reset}>\n                <i class=\"fas fa-undo\" />\n              </p>\n            </div>\n          </div>\n        </div>\n        <div>\n          <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n(function() {\n  window.accurateInterval = function(fn, time) {\n    var cancel, nextAt, timeout, wrapper;\n    nextAt = new Date().getTime() + time;\n    timeout = null;\n    wrapper = function() {\n      nextAt += time;\n      timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n      return fn();\n    };\n    cancel = function() {\n      return clearTimeout(timeout);\n    };\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n    return {\n      cancel: cancel\n    };\n  };\n}.call(this));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}